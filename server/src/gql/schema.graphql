type Query {
  users(query: String, comment_query: String): [User]!
  me: User!
  post: Post!
  posts(query: String): [Post]!
  comments: [Comment]!
  getUser(id: String!): User!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  sendMessage(input: SendMessageInput!): Message!
}

type Subscription {
  count: Int!
  userCreated: User!
  roomMessage(roomId: ID!): Message!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  postId: ID!
  authorId: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post]!
  comments(comment_query: String): [Comment]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

input SendMessageInput {
  roomId: ID!
  from: String!
  body: String!
}

type Message {
  from: String
  body: String
}
